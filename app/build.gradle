plugins {
    id 'com.android.application'
    id 'jacoco'

}

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.davidvignon.todoc"
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }
}

dependencies {

    //noinspection GradleDependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core:1.8.0'

    debugImplementation "androidx.fragment:fragment-testing:1.5.0"

    // Room components
    implementation "androidx.room:room-runtime:2.4.2"
    annotationProcessor "androidx.room:room-compiler:2.4.2"
    androidTestImplementation "androidx.room:room-testing:2.4.2"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.5.0"
    implementation "androidx.lifecycle:lifecycle-livedata:2.5.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.5.0"

    testImplementation 'junit:junit:4.13.2'

    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
}

    // open JaCoCo report after generation
    def openReport(htmlOutDir) {

        final reportPath = "$htmlOutDir\\index.html"

        println "HTML Report: $reportPath"

        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isWindows()) {
            exec { commandLine 'cmd', '/c', "start $reportPath" }
        } else if (os.isMacOsX()) {
            exec { commandLine 'open', "$htmlOutDir/index.html" }
        } else if (os.isLinux()) {
            try {
                exec { commandLine 'xdg-open', "$reportPath" }
            } catch (Exception ignored) {
                if (localProperties.containsKey("linux-html-cmd")) {
                    exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
                } else {
                    println "'linux-html-cmd' property could not be found in 'local.properties'"
                }
            }
        }
    }

// JaCoCo stuff
    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def filesToAnalyze = [
                '**/*ViewModel.class',
                '**/*Repository.class'
        ]

        task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
            group 'Reporting'
            description "Generate ${variantName} Jacoco coverage reports."

            def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

            doLast {
                openReport htmlOutDir
            }

            reports {
                xml.enabled = true
                html {
                    destination htmlOutDir
                }
            }

            getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
            getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
            getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
        }
    }